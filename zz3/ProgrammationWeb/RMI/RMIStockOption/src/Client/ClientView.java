/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ClientView.java
 *
 * Created on 22 f√©vr. 2012, 14:40:40
 */
package Client;

import java.awt.List;
import javax.swing.JOptionPane;

/**
 * Vue du client
 * @author Jean-Christophe SEPTIER Maxime ESCOURBIAC
 */
public class ClientView extends javax.swing.JFrame {

    private ClientControlleur clientControlleur; // Controlleur du client
    
    /** Creates new form ClientView */
    public ClientView() {
        initComponents();
        this.clientControlleur = new ClientControlleur(this);
        textAreaMessage.setEditable(false);
        changeAfficheConnection(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ListStockOption = new java.awt.List();
        ListFollowed = new java.awt.List();
        label1 = new java.awt.Label();
        label2 = new java.awt.Label();
        textAreaMessage = new java.awt.TextArea();
        buttonDeconnexion = new java.awt.Button();
        buttonAjouter = new java.awt.Button();
        buttonEnlever = new java.awt.Button();
        nameConnexion = new java.awt.TextField();
        buttonConnexion = new java.awt.Button();
        label3 = new java.awt.Label();
        buttonInfo = new java.awt.Button();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        ListStockOption.setName("ListeStockOption"); // NOI18N

        ListFollowed.setName("ListeStockOptionFollowed"); // NOI18N

        label1.setText("Disponible");

        label2.setText("Suivie");

        buttonDeconnexion.setLabel("Deconnexion");
        buttonDeconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeconnexionActionPerformed(evt);
            }
        });

        buttonAjouter.setLabel(">>");
        buttonAjouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAjouterActionPerformed(evt);
            }
        });

        buttonEnlever.setLabel("<<");
        buttonEnlever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnleverActionPerformed(evt);
            }
        });

        nameConnexion.setText("textField1");

        buttonConnexion.setActionCommand("Connexion");
        buttonConnexion.setLabel("Connexion");
        buttonConnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConnexionActionPerformed(evt);
            }
        });

        label3.setText("Connexion (entrer le nom d'utilisateur):");

        buttonInfo.setActionCommand("Info");
        buttonInfo.setLabel("Information");
        buttonInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(textAreaMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(85, 85, 85)
                                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ListStockOption, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(buttonAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(buttonEnlever, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ListFollowed, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(buttonInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(buttonDeconnexion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(nameConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonConnexion, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(buttonAjouter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonEnlever, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(nameConnexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(buttonConnexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(6, 6, 6)
                                .addComponent(buttonDeconnexion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                                        .addComponent(buttonInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(ListStockOption, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                                    .addComponent(ListFollowed, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textAreaMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * M√©thode appel√© par le bouton "Ajouter"
     */
    private void buttonAjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAjouterActionPerformed
        int indice = ListStockOption.getSelectedIndex();
        
        // V√©rifie si une ligne est bien selectionn√©e
        if (indice != -1 )
        {
            String stock = ListStockOption.getSelectedItem();
            clientControlleur.addFollowedStockOption(indice, stock);
        }
        
    }//GEN-LAST:event_buttonAjouterActionPerformed

    /**
     * Changer l'interface s'il est connect√© ou non
     */
    public void changeAfficheConnection(boolean connected)
    {
        if ( connected )
        {
            buttonDeconnexion.setVisible(true);
            buttonConnexion.setVisible(false);
            nameConnexion.setEditable(false);
            ListFollowed.setVisible(true);
            ListStockOption.setVisible(true);
            buttonAjouter.setVisible(true);
            buttonEnlever.setVisible(true);
            label1.setVisible(true);
            label2.setVisible(true);
            label3.setVisible(false);
            buttonInfo.setVisible(true);
            
            // Recharger la page
            this.setVisible(false);
            this.setVisible(true);
        }
        else
        {
            buttonDeconnexion.setVisible(false);
            buttonConnexion.setVisible(true);
            nameConnexion.setEditable(true);
            ListFollowed.setVisible(false);
            ListStockOption.setVisible(false);
            buttonAjouter.setVisible(false);
            buttonEnlever.setVisible(false);
            label1.setVisible(false);
            label2.setVisible(false);
            label3.setVisible(false);
            buttonInfo.setVisible(false);
            
            // Vider les listes
            ListFollowed.removeAll();
            ListStockOption.removeAll();
            
            // Recharger la page
            this.setVisible(false);
            this.setVisible(true);
        }
    }
    
    /**
     * M√©thode appel√©e quand on clique sur le bouton "<<"
     */
    private void buttonEnleverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnleverActionPerformed
        
        int indice = ListFollowed.getSelectedIndex();
        
        // V√©rifie si une ligne est bien selectionn√©e
        if (indice != -1 )
        {
            String stock = ListFollowed.getSelectedItem();
            clientControlleur.removeFollowedStockOption( indice, stock);
        }
     
    }//GEN-LAST:event_buttonEnleverActionPerformed

    /**
     * M√©thode appel√©e quand on clique sur ">>"
     */
    private void buttonConnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConnexionActionPerformed
        String name = nameConnexion.getText();
        if( name != null )
        {    
            clientControlleur.connexion(name);
        }
    }//GEN-LAST:event_buttonConnexionActionPerformed

    /**
     * M√©thode quand on clique sur "Deconnexion"
     */
    private void buttonDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeconnexionActionPerformed
        clientControlleur.deconnexion();
    }//GEN-LAST:event_buttonDeconnexionActionPerformed

    /**
     * M√©thode quand on ferme la fen√™tre
     */
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        clientControlleur.deconnexion();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing

    /**
     * M√©thode quand on clique sur "info" 
     */
    private void buttonInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInfoActionPerformed
        int indice = ListStockOption.getSelectedIndex();
        
        // V√©rifie si une ligne est bien selectionn√©e
        if (indice != -1 )
        {
            String stock = ListStockOption.getSelectedItem();
            clientControlleur.demandeInfo(stock);
        }
    }//GEN-LAST:event_buttonInfoActionPerformed

    /**
     * Permet d'afficher une alerte
     * @param message message √† afficher
     * @param titre titre de la fen√™tre
     */
    public void afficherAlert(String message, String titre)
    {
        JOptionPane.showMessageDialog(this, message, titre , WIDTH);
    }
    
    /**
     * Ajoute un stock option 
     * @param stockOption nom du stock option
     */
    public void addStockOption(String stockOption)
    {
        ListStockOption.add(stockOption);
    }
    
    /**
     * Passe un stock option de suivie √† disponible
     * @param stockOption nom du stock option
     * @param indiceSup indice dans la liste
     */
    public void addStockOptionDisponible(String stockOption, int indiceSup)
    {
        ListFollowed.remove(indiceSup);
        ListStockOption.add(stockOption);
    }
    
    /**
     * Passe un stock option de disponible √† suivie
     * @param stockOption nom du stock option
     * @param indiceSup indice dans la liste
     */
    public void addStockOptionFollowed(String stockOption, int indiceSup)
    {
        ListStockOption.remove(indiceSup);
        ListFollowed.add(stockOption);
    }
    
    /**
     * Ajoute un message dans le textArea
     * @param message message √† afficher
     */
    public void addMessage(String message)
    {
            textAreaMessage.append(message);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientView().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.List ListFollowed;
    private java.awt.List ListStockOption;
    private java.awt.Button buttonAjouter;
    private java.awt.Button buttonConnexion;
    private java.awt.Button buttonDeconnexion;
    private java.awt.Button buttonEnlever;
    private java.awt.Button buttonInfo;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private java.awt.Label label3;
    private java.awt.TextField nameConnexion;
    private java.awt.TextArea textAreaMessage;
    // End of variables declaration//GEN-END:variables

    /**
     * Supprimer le stockOption
     * @param name 
     */
    void supprimerStockOption(String name) 
    {
       if ( rechercherListe(ListFollowed, name))
        ListFollowed.remove(name);
       else if ( rechercherListe(ListStockOption, name)) 
           ListStockOption.remove(name);
    }
    
    /**
     * Recherche dans la liste un nom
     */
    private boolean rechercherListe(List l, String value)
    {
        int i = 0;
        boolean b = false;
        int ligne = l.getItemCount();
        while ( i < ligne && b == false )
        {
            if (l.getItem(i).equals(value))
                b = true;
            
            ++i;
        }
        return b;
    }
    
}
