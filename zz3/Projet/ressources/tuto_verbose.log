Welcome to Scala version 2.9.1.final (Java HotSpot(TM) 64-Bit Server VM, Java 1.6.0_29).
Type in expressions to have them evaluated.
Type :help for more information.

scala> import scalacl._
import scalacl._

scala> import scala.math._
import scala.math._

scala> implicit val context = new ScalaCLContext
warning: there were 1 deprecation warnings; re-run with -deprecation for details
context: scalacl.Context = Context(platform = Apple, devices = Intel(R) Core(TM)2 Duo CPU     T9600  @ 2.80GHz)

scala> val r = (0 to 1000000).cl // this is a CLRange
r: scalacl.CLRange = CLRange(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175...
scala> val a = r.toCLArray // this is a CLArray[Int]
a: scalacl.CLArray[Int] = CLArray(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174...
scala> val m = a.map(v => cos(v).toFloat) // run asynchronously on the GPU via OpenCL
[scalacl] Converted <<<
scala.math..cos(v.toDouble).toFloat
>>> to <<<
(((float)cos((float)_)))
>>>
[scalacl] <console>:16 associated equivalent OpenCL source to scalacl.CLArray[Int].map's function argument.
[ScalaCL] Creating kernel with source <<<

        __kernel void array_array(
            int size,
            __global const int* in0,
            __global float* out0
        ) {
            
        int __cl_i = get_global_id(0);
    
        if (__cl_i >= size)
            return;
    
            
            out0[__cl_i] = ((float)cos((float)in0[__cl_i]));
        }
        __kernel void filteredArray_filteredArray(
            int size,
            __global const int* in0,
            __global const int* presence,
            __global float* out0
        ) {
            
        int __cl_i = get_global_id(0);
    
        if (__cl_i >= size)
            return;
    
            if (!presence[__cl_i])
                return;
            
            out0[__cl_i] = ((float)cos((float)in0[__cl_i]));
        }
    
        __kernel void range_array(
            int size,
            __global const int* in0,
            __global float* out0
        ) {
            
        int __cl_i = get_global_id(0);
    
        if (__cl_i >= size)
            return;
    
            
            out0[__cl_i] = ((float)cos((float)(in0[0] + (__cl_i) * in0[2])));
        }
      
>>>
[ScalaCL] Enqueuing kernel array_array with dims 1000001
m: scalacl.CLIndexedSeq[Float] = CLArray(1.0, 0.54030234, -0.41614684, -0.9899925, -0.6536436, 0.2836622, 0.96017027, 0.75390226, -0.14550003, -0.91113025, -0.8390715, 0.004425698, 0.84385395, 0.90744674, 0.13673721, -0.7596879, -0.9576595, -0.27516335, 0.6603167, 0.9887046, 0.40808207, -0.54772925, -0.99996084, -0.53283304, 0.42417902, 0.99120283, 0.6469193, -0.29213881, -0.9626059, -0.74805754, 0.15425146, 0.91474235, 0.83422333, -0.013276747, -0.8485703, -0.9036922, -0.12796369, 0.76541406, 0.95507365, 0.26664293, -0.66693807, -0.9873393, -0.3999853, 0.5551133, 0.9998433, 0.525322, -0.43217796, -0.9923355, -0.64014435, 0.30059254, 0.96496606, 0.7421542, -0.16299078, -0.91828275, -0.8293098, 0.022126757, 0.8532201, 0.8998668, 0.119180135, -0.7710802, -0.95241296, -0.25810164, 0.673507...
